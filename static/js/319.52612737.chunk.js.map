{"version":3,"file":"static/js/319.52612737.chunk.js","mappings":"6KAGMA,EAAa,qJAGd,OAHc,oCACfC,MAAQ,CACJC,OAAO,GACV,EAeA,OAfA,yCAED,SAAkBA,EAAOC,GACrBC,QAAQC,IAAIH,EAAOC,GACnBG,KAAKC,SAAS,CACVL,OAAO,GAEf,GAAC,oBAED,WACI,OAAII,KAAKL,MAAMC,OACJ,SAAC,IAAY,IAGjBI,KAAKE,MAAMC,QACtB,KAAC,EAlBc,CAASC,EAAAA,WAqB5B,K,wHCNA,EAhBqB,WACnB,OACE,gBACEC,MAAO,CACLC,QAAS,QACTC,MAAO,QACPC,OAAQ,QACRC,UAAW,UACXC,OAAQ,QAEVC,IAAKC,EACLC,IAAI,SAGV,C,mIC6CA,EAvDiB,SAAH,GAAgB,IAAVC,EAAE,EAAFA,GAClB,GAAkCC,EAAAA,EAAAA,UAAS,CAAC,GAAE,eAAvCC,EAAS,KAAEC,EAAY,KAE9B,GAA0DC,EAAAA,EAAAA,KAAlDC,EAAY,EAAZA,aAA0BC,GAAF,EAAVC,WAAmB,EAAPD,SAASE,EAAU,EAAVA,YAC3CC,EAAAA,EAAAA,YAAU,WACJT,GAAIK,EAAaL,GAAIU,KAAKP,GAAcO,KAAKF,EAAW,aAG9D,GAAG,CAACR,IAwCJ,OAAOW,EAAAA,EAAAA,GAAWL,GAtCL,SAAH,GAAkB,IAAZM,EAAI,EAAJA,KACNC,EAAsDD,EAAtDC,OAAQC,EAA8CF,EAA9CE,KAAMC,EAAwCH,EAAxCG,SAAUC,EAA8BJ,EAA9BI,KAAMC,EAAwBL,EAAxBK,YAAaC,EAAWN,EAAXM,OAC7CC,EAAmB,OAAND,QAAM,IAANA,OAAM,EAANA,EAAQE,KAAI,SAACC,GAAI,OAClC,eAAIC,UAAU,oBAAmB,UAC/B,cAAGC,KAAMF,EAAKG,YAAY,SAAEH,EAAKP,QADIO,EAAKP,KAEvC,IAGDW,GACJ,eAAIH,UAAU,oBAAmB,SAAC,2CAIpC,OACE,iBAAKA,UAAU,aAAY,WACzB,iBAAKA,UAAU,eAAc,WAC3B,gBAAKzB,IAAKgB,EAAQd,IAAKe,KACvB,4BACE,gBAAKQ,UAAU,kBAAiB,SAAER,KAClC,iBAAKQ,UAAU,aAAY,WACzB,cAAGC,KAAMR,EAAUO,UAAU,sBAAqB,UAChD,gBAAKA,UAAU,QAAO,SAAC,iBAEzB,cAAGC,KAAMP,EAAMM,UAAU,2BAA0B,UACjD,gBAAKA,UAAU,QAAO,SAAC,qBAK/B,gBAAKA,UAAU,cAAa,SAAEL,KAC9B,gBAAKK,UAAU,eAAc,SAAC,aAC9B,eAAIA,UAAU,oBAAmB,SACpB,OAAVH,QAAU,IAAVA,GAAAA,EAAYO,OAASP,EAAaM,MAI3C,GAEiCvB,EACnC,E,UCzCA,EAZqB,SAAH,GAAuB,IAAjBY,EAAI,EAAJA,KAAMa,EAAG,EAAHA,IAC5B,OACE,iCACE,gBAAK9B,IAAK8B,EAAK5B,IAAKe,KACpB,gBAAKQ,UAAU,aAAY,SAAER,MAGnC,E,wCCsGA,EAtFiB,SAAH,GAA+B,IAAzBc,EAAiB,EAAjBA,kBAClB,GAAgC3B,EAAAA,EAAAA,UAAS,IAAG,eAArC4B,EAAQ,KAAEC,EAAW,KAC5B,GAA4B7B,EAAAA,EAAAA,UAAS,KAAI,eAAlC8B,EAAM,KAAEC,EAAS,KACxB,GAA4B/B,EAAAA,EAAAA,WAAS,GAAK,eAAnCgC,EAAO,KAAEC,EAAQ,KAExB,GACE9B,EAAAA,EAAAA,KADM+B,EAAO,EAAPA,QAAgBC,GAAF,EAALtD,MAAuB,EAAhBsD,kBAAkB9B,EAAO,EAAPA,QAASE,EAAU,EAAVA,YAGnDC,EAAAA,EAAAA,YAAU,WACR4B,GAEF,GAAG,IAEH,IAAMA,EAAoB,WACxBD,EAAiBL,GACdrB,MAAK,SAAC4B,GACLR,EAAY,GAAD,eAAKD,IAAQ,OAAKS,KAC7BJ,GAAS,GACTF,EAAUD,GAAY,OAAHO,QAAG,IAAHA,OAAG,EAAHA,EAAKZ,QAC1B,IACChB,MAAK,kBAAMF,EAAW,YAAY,GACvC,EAEM+B,GAAWC,EAAAA,EAAAA,QAAO,IAElBC,EAAc,SAACzC,GACnBuC,EAASG,QAAQC,SAAQ,SAACtB,GAAI,OAC5BA,EAAKuB,UAAUC,OAAO,sBAAsB,IAE9CN,EAASG,QAAQ1C,GAAI4C,UAAUE,IAAI,uBACnCP,EAASG,QAAQ1C,GAAI+C,OACvB,EAEMC,EAAqB,OAARnB,QAAQ,IAARA,OAAQ,EAARA,EAAUT,KAAI,SAAC6B,EAAMC,GAAG,OACzC,SAACC,EAAA,EAAa,CAAeC,WAAW,aAAaC,QAAS,IAAK,UACjE,eAEE/B,UAAU,aACVgC,IAAK,SAACC,GAAE,OAAMhB,EAASG,QAAQQ,GAAOK,CAAE,EACxCC,QAAS,WACP5B,EAAkBqB,EAAKjD,IACvByC,EAAYS,EACd,EACAO,UAAW,SAACC,GACI,MAAVA,EAAEC,KAAyB,UAAVD,EAAEC,MACrB/B,EAAkBqB,EAAKjD,IACvByC,EAAYS,GAEhB,EAAE,UAEF,SAAC,EAAY,CAACvB,IAAKsB,EAAKpC,OAAQC,KAAMmC,EAAKnC,UAhB3BmC,EAAKjD,GAkBT,IAGZ4D,GAAUC,EAAAA,EAAAA,UACd,kBAxEsB,SAACvD,EAAShB,EAAW2C,GAC7C,OAAQ3B,GACN,IAAK,UACH,OAAO,SAACwD,EAAA,EAAO,IACjB,IAAK,UACH,OAAO7B,GAAU,SAAC6B,EAAA,EAAO,KAAM,SAACxE,EAAS,IAC3C,IAAK,YACH,OAAO,SAACA,EAAS,IACnB,IAAK,QACH,OAAO,SAACyE,EAAA,EAAY,IAEtB,QACE,MAAM,IAAIC,MAAM,4BAEtB,CA2DMrD,CACEL,GACA,kBACE,eAAIgB,UAAU,aAAY,UACxB,SAAC2C,EAAA,EAAe,CAACC,UAAW,KAAK,SAAElB,KAChC,GAEPf,EACD,GACH,CAAC3B,IAGH,OACE,iBAAKgB,UAAU,aAAY,UACxBsC,GACD,mBACEO,SAAUhC,EACVb,UAAU,mCACVkC,QAASnB,EAAkB,UAE3B,gBAAKf,UAAU,QAAO,SAAC,kBAI/B,E,8BCXA,EAjFuB,WACrB,OAAwBrB,EAAAA,EAAAA,UAAS,MAAK,eAA/BgD,EAAI,KAAEmB,EAAO,KACpB,GAA2DhE,EAAAA,EAAAA,KAAnD+B,EAAO,EAAPA,QAASrD,EAAK,EAALA,MAAOuF,EAAkB,EAAlBA,mBAAoB9D,EAAU,EAAVA,WAEtC+D,EAAe,SAACrB,GACpBmB,EAAQnB,EACV,EAOMsB,EAAezF,GACnB,gBAAKwC,UAAU,8BAA6B,UAC1C,SAACyC,EAAA,EAAY,MAEb,KACES,EAAWvB,EAAcA,EAAKvB,OAAS,GAC3C,iBAAKJ,UAAU,uBAAsB,WACnC,iBAAKA,UAAU,uBAAsB,UAAC,mBACnB2B,EAAK,GAAGnC,KAAK,aAEhC,SAAC,KAAI,CACH2D,GAAE,sBAAiBxB,EAAK,GAAGjD,IAC3BsB,UAAU,2BAA0B,UAEpC,gBAAKA,UAAU,QAAO,SAAC,kBAI3B,gBAAKA,UAAU,qBAAoB,SAAC,8DAbd,KAkBxB,OACE,iBAAKA,UAAU,oBAAmB,WAChC,SAAC,KAAM,CACLoD,cAAe,CACbC,SAAU,IAEZC,iBAAkBC,EAAAA,GAAW,CAC3BF,SAAUE,EAAAA,KAAaC,SAAS,4BAElCC,SAAU,YAAmB,IArCfjE,EAqCD6D,EAAQ,EAARA,SArCC7D,EAsCD6D,EArCjBpE,IACA8D,EAAmBvD,GAAMJ,KAAK4D,EAqC1B,EAAE,UAEF,UAAC,KAAI,YACH,kBAAOhD,UAAU,qBAAqB0D,QAAQ,WAAU,SAAC,kCAGzD,iBAAK1D,UAAU,uBAAsB,WACnC,SAAC,KAAK,CACJtB,GAAG,WACHc,KAAK,WACLmE,KAAK,OACLC,YAAY,gBAEd,mBACED,KAAK,SACL3D,UAAU,sBACV6C,SAAUhC,EAAQ,UAElB,gBAAKb,UAAU,QAAO,SAAC,eAG3B,SAAC,KAAkB,CACjB4C,UAAU,MACV5C,UAAU,qBACVR,KAAK,kBAIV0D,EACAD,IAGP,E,gEClCMY,EAAO,SAAH,GAAkB,IAAZvE,EAAI,EAAJA,KACNC,EAA8CD,EAA9CC,OAAQC,EAAsCF,EAAtCE,KAAMG,EAAgCL,EAAhCK,YAAaF,EAAmBH,EAAnBG,SAAUC,EAASJ,EAATI,KACvCoE,EAAiB,OAANvE,QAAM,IAANA,GAAAA,EAAQwE,SAAS,wBAC9B,uBACA,kBACJ,OACE,iBAAK/D,UAAU,oBAAmB,WAChC,gBAAKzB,IAAKgB,EAAQd,IAAI,mBAAmBuB,UAAW8D,KACpD,iBAAK9D,UAAU,mBAAkB,WAC/B,cAAGA,UAAU,mBAAkB,SAAER,KACjC,cAAGQ,UAAU,oBAAmB,SAAEL,KAClC,iBAAKK,UAAU,mBAAkB,WAC/B,cAAGC,KAAMR,EAAUO,UAAU,sBAAqB,UAChD,gBAAKA,UAAU,QAAO,SAAC,gBAEzB,cAAGC,KAAMP,EAAMM,UAAU,2BAA0B,UACjD,gBAAKA,UAAU,QAAO,SAAC,mBAMnC,EAEA,EA5EmB,WACjB,OAAwBrB,EAAAA,EAAAA,UAAS,CAAC,GAAE,eAA7BgD,EAAI,KAAEmB,EAAO,KAEpB,GAA0DkB,EAAAA,EAAAA,KAAlDjF,EAAY,EAAZA,aAAcE,EAAU,EAAVA,WAAYD,EAAO,EAAPA,QAASE,EAAU,EAAVA,YAE3CC,EAAAA,EAAAA,YAAU,WACR8E,IACA,IAAMC,EAAaC,YAAYF,EAAY,MAC3C,OAAO,WACLG,cAAcF,EAChB,CAEF,GAAG,IAEH,IAAMlB,EAAe,SAACrB,GACpBmB,EAAQnB,EACV,EAEMsC,EAAa,WACjBhF,IACA,IAAMP,EAAK2F,KAAKC,MAAmB,IAAbD,KAAKE,SAAiC,QAC5DxF,EAAaL,GACVU,KAAK4D,GACL5D,MAAK,WACJF,EAAW,YACb,GACJ,EAEA,OACE,iBAAKc,UAAU,aAAY,WACxBX,EAAAA,EAAAA,GAAWL,EAAS6E,EAAMlC,IAC3B,iBAAK3B,UAAU,qBAAoB,WACjC,eAAGA,UAAU,oBAAmB,UAAC,+BAE/B,kBAAM,6CAGR,cAAGA,UAAU,oBAAmB,SAAC,2BACjC,mBACEA,UAAU,sBACVkC,QAAS,WACP+B,GACF,EAAE,UAEF,gBAAKjE,UAAU,QAAO,SAAC,cAEzB,gBAAKzB,IAAKiG,EAAS/F,IAAI,UAAUuB,UAAU,gCAInD,E,qDCnBA,EA7BuB,WACrB,OAAoCrB,EAAAA,EAAAA,UAAS,MAAK,eAA3C8F,EAAU,KAAEC,EAAa,KAChC,OACE,iCACE,UAACC,EAAA,EAAM,YACL,iBAAMnF,KAAK,cAAc8C,QAAQ,+BACjC,2BAAO,kCAET,SAAChF,EAAA,EAAa,WACZ,SAAC,EAAU,OAEb,iBAAK0C,UAAU,gBAAe,WAC5B,SAAC1C,EAAA,EAAa,WACZ,SAAC,EAAQ,CAACgD,kBAAmBoE,OAE/B,4BACE,SAACpH,EAAA,EAAa,WACZ,SAAC,EAAQ,CAACoB,GAAI+F,OAEhB,SAACnH,EAAA,EAAa,WACZ,SAAC,EAAc,aAIrB,gBAAK0C,UAAU,gBAAgBzB,IAAKqG,EAAYnG,IAAI,aAG1D,C,mGCnCMoG,EAAW7F,2CACX8F,EAAU9F,mCAsFhB,EArFuB,WACrB,IAAM+F,EAAY,EACZC,EAAc,GAEpB,ECLsB,WACtB,OAA8BrG,EAAAA,EAAAA,UAAS,WAAU,eAA1CK,EAAO,KAAEE,EAAU,KAEpB+F,GAAUC,EAAAA,EAAAA,aAAW,yCACzB,WACE7E,GAAG,gGAKmB,OAJtB8E,EAAM,+BAAG,MACTC,EAAI,+BAAG,KACPC,EAAO,+BAAG,CAAE,eAAgB,oBAE5BnG,EAAW,WAAW,kBAGGoG,MAAMjF,EAAK,CAAE8E,OAAAA,EAAQC,KAAAA,EAAMC,QAAAA,IAAW,KAAD,EAA9C,IAARE,EAAQ,QAEAC,GAAG,CAAD,sBACR,IAAI9C,MAAM,mBAAD,OAAoBrC,EAAG,qBAAakF,EAASE,SAAU,KAAD,oBAGpDF,EAASG,OAAO,KAAD,GAAxB,OAAJpG,EAAI,yBAGHA,GAAI,QAES,MAFT,0BAEXJ,EAAW,SAAS,+DAGvB,mDAxBwB,GAyBzB,IAOF,MAAO,CAAE+F,QAAAA,EAAShG,YAJCiG,EAAAA,EAAAA,cAAY,WAC7BhG,EAAW,UACb,GAAG,IAE2BF,QAAAA,EAASE,WAAAA,EACzC,CD/BuDyG,GAA7CV,EAAO,EAAPA,QAAShG,EAAU,EAAVA,WAAYD,EAAO,EAAPA,QAASE,EAAU,EAAVA,WAEhC4B,EAAgB,yCAAG,yGACiE,OAD1DL,EAAM,+BAAG,EACjCJ,EAAG,UAAMwE,EAAQ,8BAAsBpE,EAAM,kBAAUsE,EAAS,mBAAWD,GAAO,SACnEG,EAAQ5E,GAAK,KAAD,EAArB,OAANuF,EAAM,yBACLA,EAAOtG,KAAK4D,QAAQpD,IAAI+F,IAAoB,2CACpD,kBAJqB,mCAMhB9G,EAAY,yCAAG,WAAOL,GAAE,8EAC8B,OAApD2B,EAAG,UAAMwE,EAAQ,uBAAenG,EAAE,mBAAWoG,GAAO,SACrCG,EAAQ5E,GAAK,KAAD,EAArB,OAANuF,EAAM,yBACLC,EAAoBD,EAAOtG,KAAK4D,QAAQ,KAAG,2CACnD,gBAJiB,sCAMZH,EAAkB,yCAAG,WAAOvD,GAAI,8EAC6B,OAA3Da,EAAG,UAAMwE,EAAQ,4BAAoBrF,EAAI,mBAAWsF,GAAO,SAC5CG,EAAQ5E,GAAK,KAAD,EAArB,OAANuF,EAAM,yBACLA,EAAOtG,KAAK4D,QAAQpD,IAAI+F,IAAoB,2CACpD,gBAJuB,sCAMlBC,EAAY,yCAAG,yGACmE,OAD5DrF,EAAM,+BAAG,EAC7BJ,EAAG,UAAMwE,EAAQ,0BAAkBpE,EAAM,kBAAUuE,EAAW,mBAAWF,GAAO,SACjEG,EAAQ5E,GAAK,KAAD,EAArB,OAANuF,EAAM,yBACLA,EAAOtG,KAAK4D,QAAQpD,IAAIiG,IAAiB,2CACjD,kBAJiB,mCAMZC,EAAQ,yCAAG,WAAOtH,GAAE,8EAC8B,OAAhD2B,EAAG,UAAMwE,EAAQ,mBAAWnG,EAAE,mBAAWoG,GAAO,SACjCG,EAAQ5E,GAAK,KAAD,EACyB,OADpDuF,EAAM,OACZlI,QAAQC,IAAI,qBAAsBiI,EAAOtG,KAAK4D,QAAQ,IAAI,kBACnD6C,EAAiBH,EAAOtG,KAAK4D,QAAQ,KAAG,2CAChD,gBALa,sCAOR2C,EAAsB,SAACvG,GAC3B,IAAQE,EAAmDF,EAAnDE,KAAMG,EAA6CL,EAA7CK,YAAasG,EAAgC3G,EAAhC2G,UAAWC,EAAqB5G,EAArB4G,KAAMxH,EAAeY,EAAfZ,GAAIkB,EAAWN,EAAXM,OAChD,MAAO,CACLlB,GAAAA,EACAc,KAAAA,EACAG,YAAaA,GAAe,6CAC5BJ,OAAO,GAAD,OAAK0G,EAAUE,KAAI,YAAIF,EAAUG,WACvC3G,SAAUyG,EAAK,GAAG7F,IAClBX,KAAMwG,EAAK,GAAG7F,IACdT,OAAQA,EAAOyG,MAEnB,EAEMN,EAAmB,SAACzG,GAAU,IAAD,EAE/BgH,EAOEhH,EAPFgH,MACA3G,EAMEL,EANFK,YACAsG,EAKE3G,EALF2G,UACAvH,EAIEY,EAJFZ,GACA6H,EAGEjH,EAHFiH,OACAC,EAEElH,EAFFkH,UACAC,EACEnH,EADFmH,YAEF,MAAO,CACL/H,GAAAA,EACA4H,MAAAA,EACAI,MAAOH,EAAO,GAAGG,MAAK,UAAMH,EAAO,GAAGG,MAAK,KAAM,gBACjD/G,YAAaA,GAAe,0BAC5BJ,OAAO,GAAD,OAAK0G,EAAUE,KAAI,YAAIF,EAAUG,WACvCI,UAAWA,EAAS,UACbA,EAAS,WACZ,2CACJG,UAAwB,QAAd,EAAAF,EAAY,UAAE,aAAd,EAAgBE,WAAY,QAE1C,EAEA,MAAO,CACL1H,WAAAA,EACAD,QAAAA,EACAE,WAAAA,EACA4B,iBAAAA,EACAiC,mBAAAA,EACAhE,aAAAA,EACA+G,aAAAA,EACAE,SAAAA,EAEJ,C,8EEnEA,EAjBiB,WACb,OACI,iCACI,cAAGhG,UAAU,eAAc,SAAC,kDAC5B,iBAAKA,UAAU,WAAU,WACrB,iBAAKA,UAAU,yBAAwB,WACnC,gBAAKA,UAAU,4BACf,gBAAKA,UAAU,6BAEnB,gBAAKA,UAAU,2BACf,gBAAKA,UAAU,2BACf,gBAAKA,UAAU,+BAI/B,E,UCbaX,EAAa,SAACL,EAAShB,EAAWsB,GAC7C,OAAQN,GACN,IAAK,UACH,OAAO,SAAC,EAAQ,IAClB,IAAK,UACH,OAAO,SAACwD,EAAA,EAAO,IACjB,IAAK,YACH,OAAO,SAACxE,EAAS,CAACsB,KAAMA,IAC1B,IAAK,QACH,OAAO,SAACmD,EAAA,EAAY,IAEtB,QACE,MAAM,IAAIC,MAAM,4BAEtB,C","sources":["components/errorBoundary/ErrorBoundary.js","components/errorMessage/ErrorMessage.js","components/charInfo/CharInfo.js","components/charListItem/CharListItem.js","components/charList/CharList.js","components/charSearchForm/CharSearchForm.js","components/randomChar/RandomChar.js","pages/CharactersPage.js","services/MarvelServices.js","hooks/useFetch.js","components/skeleton/Skeleton.js","utils/setContent.js"],"sourcesContent":["import { Component } from \"react\";\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\n\nclass ErrorBoundary extends Component {\n    state = {\n        error: false\n    }\n\n    componentDidCatch(error, errorInfo) {\n        console.log(error, errorInfo);\n        this.setState({\n            error: true\n        })\n    }\n\n    render() {\n        if (this.state.error) {\n            return <ErrorMessage/>\n        }\n\n        return this.props.children;\n    }\n}\n\nexport default ErrorBoundary;","import img from \"./error.gif\";\r\n\r\nconst ErrorMessage = () => {\r\n  return (\r\n    <img\r\n      style={{\r\n        display: \"block\",\r\n        width: \"200px\",\r\n        height: \"200px\",\r\n        objectFit: \"contain\",\r\n        margin: \"auto\",\r\n      }}\r\n      src={img}\r\n      alt=\"Error\"\r\n    />\r\n  );\r\n};\r\n\r\nexport default ErrorMessage;\r\n","import { useEffect, useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./charInfo.scss\";\nimport MarvelServices from \"../../services/MarvelServices\";\nimport { setContent } from \"../../utils/setContent\";\n\nconst CharInfo = ({ id }) => {\n  const [character, setChatacter] = useState({});\n\n  const { getCharacter, clearError, process, setProcess } = MarvelServices();\n  useEffect(() => {\n    if (id) getCharacter(id).then(setChatacter).then(setProcess(\"Confirmed\"));\n\n    // eslint-disable-next-line\n  }, [id]);\n\n  const View = ({ data }) => {\n    const { imgUrl, name, homepage, wiki, description, comics } = data;\n    const comicsList = comics?.map((item) => (\n      <li className=\"char__comics-item\" key={item.name}>\n        <a href={item.resourceURI}>{item.name}</a>\n      </li>\n    ));\n\n    const noComics = (\n      <li className=\"char__comics-item\">\n        There is no comics with this character\n      </li>\n    );\n    return (\n      <div className=\"char__info\">\n        <div className=\"char__basics\">\n          <img src={imgUrl} alt={name} />\n          <div>\n            <div className=\"char__info-name\">{name}</div>\n            <div className=\"char__btns\">\n              <a href={homepage} className=\"button button__main\">\n                <div className=\"inner\">Home page</div>\n              </a>\n              <a href={wiki} className=\"button button__secondary\">\n                <div className=\"inner\">Wiki</div>\n              </a>\n            </div>\n          </div>\n        </div>\n        <div className=\"char__descr\">{description}</div>\n        <div className=\"char__comics\">Comics:</div>\n        <ul className=\"char__comics-list\">\n          {comicsList?.length ? comicsList : noComics}\n        </ul>\n      </div>\n    );\n  };\n\n  return setContent(process, View, character);\n};\n\nCharInfo.propTypes = {\n  id: PropTypes.number,\n};\n\nexport default CharInfo;\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nconst CharListItem = ({ name, url }) => {\r\n  return (\r\n    <>\r\n      <img src={url} alt={name} />\r\n      <div className=\"char__name\">{name}</div>\r\n    </>\r\n  );\r\n};\r\nCharListItem.propTypes = {\r\n  name: PropTypes.string.isRequired,\r\n  url: PropTypes.string.isRequired,\r\n};\r\nexport default CharListItem;\r\n","import \"./charList.scss\";\nimport PropTypes from \"prop-types\";\nimport CharListItem from \"../charListItem/CharListItem\";\nimport { useEffect, useState, useRef, useMemo } from \"react\";\nimport Spinner from \"../spinner/Spinner\";\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\nimport MarvelServices from \"../../services/MarvelServices\";\nimport { CSSTransition, TransitionGroup } from \"react-transition-group\";\n\nexport const setContent = (process, Component, isEmpty) => {\n  switch (process) {\n    case \"Waiting\":\n      return <Spinner />;\n    case \"Loading\":\n      return isEmpty ? <Spinner /> : <Component />;\n    case \"Confirmed\":\n      return <Component />;\n    case \"Error\":\n      return <ErrorMessage />;\n\n    default:\n      throw new Error(\"Unexpected process state\");\n  }\n};\n\nconst CharList = ({ selectCharHandler }) => {\n  const [charList, setCharList] = useState([]);\n  const [offset, setOffset] = useState(200);\n  const [isEmpty, setEmpty] = useState(true);\n\n  const { loading, error, getAllCharacters, process, setProcess } =\n    MarvelServices();\n\n  useEffect(() => {\n    getListCharacters();\n    // eslint-disable-next-line\n  }, []);\n\n  const getListCharacters = () => {\n    getAllCharacters(offset)\n      .then((res) => {\n        setCharList([...charList, ...res]);\n        setEmpty(false);\n        setOffset(offset + res?.length);\n      })\n      .then(() => setProcess(\"Confirmed\"));\n  };\n\n  const charRefs = useRef([]);\n\n  const focusOnItem = (id) => {\n    charRefs.current.forEach((item) =>\n      item.classList.remove(\"char__item_selected\")\n    );\n    charRefs.current[id].classList.add(\"char__item_selected\");\n    charRefs.current[id].focus();\n  };\n\n  const characters = charList?.map((char, ind) => (\n    <CSSTransition key={char.id} classNames=\"char__item\" timeout={1000}>\n      <li\n        // key={char.id}\n        className=\"char__item\"\n        ref={(el) => (charRefs.current[ind] = el)}\n        onClick={() => {\n          selectCharHandler(char.id);\n          focusOnItem(ind);\n        }}\n        onKeyDown={(e) => {\n          if (e.key === \" \" || e.key === \"Enter\") {\n            selectCharHandler(char.id);\n            focusOnItem(ind);\n          }\n        }}\n      >\n        <CharListItem url={char.imgUrl} name={char.name} />\n      </li>\n    </CSSTransition>\n  ));\n\n  const content = useMemo(\n    () =>\n      setContent(\n        process,\n        () => (\n          <ul className=\"char__grid\">\n            <TransitionGroup component={null}>{characters}</TransitionGroup>\n          </ul>\n        ),\n        isEmpty\n      ),\n    [process]\n  );\n\n  return (\n    <div className=\"char__list\">\n      {content}\n      <button\n        disabled={loading}\n        className=\"button button__main button__long\"\n        onClick={getListCharacters}\n      >\n        <div className=\"inner\">load more</div>\n      </button>\n    </div>\n  );\n};\nCharList.propTypes = {\n  selectCharHandler: PropTypes.func.isRequired,\n};\n\nexport default CharList;\n","import React, { useState } from \"react\";\r\nimport {\r\n  Formik,\r\n  Form,\r\n  Field,\r\n  ErrorMessage as FormikErrorMessage,\r\n} from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\nimport \"./CharSearchForm.scss\";\r\nimport { Link } from \"react-router-dom\";\r\nimport MarvelServices from \"../../services/MarvelServices\";\r\n\r\nconst CharSearchForm = () => {\r\n  const [char, setChar] = useState(null);\r\n  const { loading, error, getCharacterByName, clearError } = MarvelServices();\r\n\r\n  const onCharLoaded = (char) => {\r\n    setChar(char);\r\n  };\r\n\r\n  const updateChar = (name) => {\r\n    clearError();\r\n    getCharacterByName(name).then(onCharLoaded);\r\n  };\r\n\r\n  const errorMessage = error ? (\r\n    <div className=\"char__search-critical-error\">\r\n      <ErrorMessage />\r\n    </div>\r\n  ) : null;\r\n  const results = !char ? null : char.length > 0 ? (\r\n    <div className=\"char__search-wrapper\">\r\n      <div className=\"char__search-success\">\r\n        There is! Visit {char[0].name} page?\r\n      </div>\r\n      <Link\r\n        to={`/characters/${char[0].id}`}\r\n        className=\"button button__secondary\"\r\n      >\r\n        <div className=\"inner\">To page</div>\r\n      </Link>\r\n    </div>\r\n  ) : (\r\n    <div className=\"char__search-error\">\r\n      The character was not found. Check the name and try again\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <div className=\"char__search-form\">\r\n      <Formik\r\n        initialValues={{\r\n          charName: \"\",\r\n        }}\r\n        validationSchema={Yup.object({\r\n          charName: Yup.string().required(\"This field is required\"),\r\n        })}\r\n        onSubmit={({ charName }) => {\r\n          updateChar(charName);\r\n        }}\r\n      >\r\n        <Form>\r\n          <label className=\"char__search-label\" htmlFor=\"charName\">\r\n            Or find a character by name:\r\n          </label>\r\n          <div className=\"char__search-wrapper\">\r\n            <Field\r\n              id=\"charName\"\r\n              name=\"charName\"\r\n              type=\"text\"\r\n              placeholder=\"Enter name\"\r\n            />\r\n            <button\r\n              type=\"submit\"\r\n              className=\"button button__main\"\r\n              disabled={loading}\r\n            >\r\n              <div className=\"inner\">find</div>\r\n            </button>\r\n          </div>\r\n          <FormikErrorMessage\r\n            component=\"div\"\r\n            className=\"char__search-error\"\r\n            name=\"charName\"\r\n          />\r\n        </Form>\r\n      </Formik>\r\n      {results}\r\n      {errorMessage}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CharSearchForm;\r\n","import { useEffect, useState } from \"react\";\nimport MarvelService from \"../../services/MarvelServices\";\nimport mjolnir from \"../../resources/img/mjolnir.png\";\nimport { setContent } from \"../../utils/setContent\";\n\nimport \"./randomChar.scss\";\n\nconst RandomChar = () => {\n  const [char, setChar] = useState({});\n\n  const { getCharacter, clearError, process, setProcess } = MarvelService();\n\n  useEffect(() => {\n    updateChar();\n    const intervalId = setInterval(updateChar, 15000);\n    return () => {\n      clearInterval(intervalId);\n    };\n    // eslint-disable-next-line\n  }, []);\n\n  const onCharLoaded = (char) => {\n    setChar(char);\n  };\n\n  const updateChar = () => {\n    clearError();\n    const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000);\n    getCharacter(id)\n      .then(onCharLoaded)\n      .then(() => {\n        setProcess(\"Confirmed\");\n      });\n  };\n\n  return (\n    <div className=\"randomchar\">\n      {setContent(process, View, char)}\n      <div className=\"randomchar__static\">\n        <p className=\"randomchar__title\">\n          Random character for today!\n          <br />\n          Do you want to get to know him better?\n        </p>\n        <p className=\"randomchar__title\">Or choose another one</p>\n        <button\n          className=\"button button__main\"\n          onClick={() => {\n            updateChar();\n          }}\n        >\n          <div className=\"inner\">try it</div>\n        </button>\n        <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\" />\n      </div>\n    </div>\n  );\n};\n\nconst View = ({ data }) => {\n  const { imgUrl, name, description, homepage, wiki } = data;\n  const imgStyle = imgUrl?.includes(\"/image_not_available\")\n    ? \"randomchar__img fill\"\n    : \"randomchar__img\";\n  return (\n    <div className=\"randomchar__block\">\n      <img src={imgUrl} alt=\"Random character\" className={imgStyle} />\n      <div className=\"randomchar__info\">\n        <p className=\"randomchar__name\">{name}</p>\n        <p className=\"randomchar__descr\">{description}</p>\n        <div className=\"randomchar__btns\">\n          <a href={homepage} className=\"button button__main\">\n            <div className=\"inner\">homepage</div>\n          </a>\n          <a href={wiki} className=\"button button__secondary\">\n            <div className=\"inner\">Wiki</div>\n          </a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default RandomChar;\n","import React, { useState } from \"react\";\r\nimport { Helmet } from \"react-helmet\";\r\nimport CharInfo from \"../components/charInfo/CharInfo\";\r\nimport CharList from \"../components/charList/CharList\";\r\nimport CharSearchForm from \"../components/charSearchForm/CharSearchForm\";\r\nimport ErrorBoundary from \"../components/errorBoundary/ErrorBoundary\";\r\nimport RandomChar from \"../components/randomChar/RandomChar\";\r\nimport decoration from \"../resources/img/vision.png\";\r\n\r\nconst CharactersPage = () => {\r\n  const [charInfoId, setCharInfoId] = useState(null);\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <meta name=\"description\" content=\"Marvel information portal\" />\r\n        <title>Marvel information portal</title>\r\n      </Helmet>\r\n      <ErrorBoundary>\r\n        <RandomChar />\r\n      </ErrorBoundary>\r\n      <div className=\"char__content\">\r\n        <ErrorBoundary>\r\n          <CharList selectCharHandler={setCharInfoId} />\r\n        </ErrorBoundary>\r\n        <div>\r\n          <ErrorBoundary>\r\n            <CharInfo id={charInfoId} />\r\n          </ErrorBoundary>\r\n          <ErrorBoundary>\r\n            <CharSearchForm />\r\n          </ErrorBoundary>\r\n        </div>\r\n      </div>\r\n      <img className=\"bg-decoration\" src={decoration} alt=\"vision\" />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CharactersPage;\r\n","import { useFetch } from \"../hooks/useFetch\";\r\nconst _baseUrl = process.env.REACT_APP_BASE_URL;\r\nconst _apiKey = process.env.REACT_APP_API_KEY;\r\nconst MarvelServices = () => {\r\n  const charLimit = 9;\r\n  const comicsLimit = 16;\r\n\r\n  const { request, clearError, process, setProcess } = useFetch();\r\n\r\n  const getAllCharacters = async (offset = 0) => {\r\n    const url = `${_baseUrl}/characters?offset=${offset}&limit=${charLimit}&apikey=${_apiKey}`;\r\n    const result = await request(url);\r\n    return result.data.results.map(_transformCharacter);\r\n  };\r\n\r\n  const getCharacter = async (id) => {\r\n    const url = `${_baseUrl}/characters/${id}?apikey=${_apiKey}`;\r\n    const result = await request(url);\r\n    return _transformCharacter(result.data.results[0]);\r\n  };\r\n\r\n  const getCharacterByName = async (name) => {\r\n    const url = `${_baseUrl}/characters?name=${name}&apikey=${_apiKey}`;\r\n    const result = await request(url);\r\n    return result.data.results.map(_transformCharacter);\r\n  };\r\n\r\n  const getAllComics = async (offset = 0) => {\r\n    const url = `${_baseUrl}/comics?offset=${offset}&limit=${comicsLimit}&apikey=${_apiKey}`;\r\n    const result = await request(url);\r\n    return result.data.results.map(_transformComics);\r\n  };\r\n\r\n  const getComic = async (id) => {\r\n    const url = `${_baseUrl}/comics/${id}?apikey=${_apiKey}`;\r\n    const result = await request(url);\r\n    console.log(\"original data >>> \", result.data.results[0]);\r\n    return _transformComics(result.data.results[0]);\r\n  };\r\n\r\n  const _transformCharacter = (data) => {\r\n    const { name, description, thumbnail, urls, id, comics } = data;\r\n    return {\r\n      id,\r\n      name,\r\n      description: description || \"There is no description for this character\",\r\n      imgUrl: `${thumbnail.path}.${thumbnail.extension}`,\r\n      homepage: urls[0].url,\r\n      wiki: urls[1].url,\r\n      comics: comics.items,\r\n    };\r\n  };\r\n\r\n  const _transformComics = (data) => {\r\n    const {\r\n      title,\r\n      description,\r\n      thumbnail,\r\n      id,\r\n      prices,\r\n      pageCount,\r\n      textObjects,\r\n    } = data;\r\n    return {\r\n      id,\r\n      title,\r\n      price: prices[0].price ? `${prices[0].price}$` : \"not available\",\r\n      description: description || \"There is no description\",\r\n      imgUrl: `${thumbnail.path}.${thumbnail.extension}`,\r\n      pageCount: pageCount\r\n        ? `${pageCount} pages.`\r\n        : \"No information about the number of pages\",\r\n      language: textObjects[0]?.language || \"en-us\",\r\n    };\r\n  };\r\n\r\n  return {\r\n    clearError,\r\n    process,\r\n    setProcess,\r\n    getAllCharacters,\r\n    getCharacterByName,\r\n    getCharacter,\r\n    getAllComics,\r\n    getComic,\r\n  };\r\n};\r\n\r\nexport default MarvelServices;\r\n","import { useState, useCallback } from \"react\";\r\n\r\nexport const useFetch = () => {\r\n  const [process, setProcess] = useState(\"Waiting\");\r\n\r\n  const request = useCallback(\r\n    async (\r\n      url,\r\n      method = \"GET\",\r\n      body = null,\r\n      headers = { \"Content-Type\": \"application/json\" }\r\n    ) => {\r\n      setProcess(\"Loading\");\r\n\r\n      try {\r\n        const response = await fetch(url, { method, body, headers });\r\n\r\n        if (!response.ok) {\r\n          throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n        }\r\n\r\n        const data = await response.json();\r\n\r\n        // setProcess(\"Confirmed\");\r\n        return data;\r\n      } catch (e) {\r\n        setProcess(\"Error\");\r\n        throw e;\r\n      }\r\n    },\r\n    []\r\n  );\r\n\r\n  const clearError = useCallback(() => {\r\n    setProcess(\"Loading\");\r\n  }, []);\r\n\r\n  return { request, clearError, process, setProcess };\r\n};\r\n","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import ErrorMessage from \"../components/errorMessage/ErrorMessage\";\r\nimport Skeleton from \"../components/skeleton/Skeleton\";\r\nimport Spinner from \"../components/spinner/Spinner\";\r\n\r\nexport const setContent = (process, Component, data) => {\r\n  switch (process) {\r\n    case \"Waiting\":\r\n      return <Skeleton />;\r\n    case \"Loading\":\r\n      return <Spinner />;\r\n    case \"Confirmed\":\r\n      return <Component data={data} />;\r\n    case \"Error\":\r\n      return <ErrorMessage />;\r\n\r\n    default:\r\n      throw new Error(\"Unexpected process state\");\r\n  }\r\n};\r\n"],"names":["ErrorBoundary","state","error","errorInfo","console","log","this","setState","props","children","Component","style","display","width","height","objectFit","margin","src","img","alt","id","useState","character","setChatacter","MarvelServices","getCharacter","process","clearError","setProcess","useEffect","then","setContent","data","imgUrl","name","homepage","wiki","description","comics","comicsList","map","item","className","href","resourceURI","noComics","length","url","selectCharHandler","charList","setCharList","offset","setOffset","isEmpty","setEmpty","loading","getAllCharacters","getListCharacters","res","charRefs","useRef","focusOnItem","current","forEach","classList","remove","add","focus","characters","char","ind","CSSTransition","classNames","timeout","ref","el","onClick","onKeyDown","e","key","content","useMemo","Spinner","ErrorMessage","Error","TransitionGroup","component","disabled","setChar","getCharacterByName","onCharLoaded","errorMessage","results","to","initialValues","charName","validationSchema","Yup","required","onSubmit","htmlFor","type","placeholder","View","imgStyle","includes","MarvelService","updateChar","intervalId","setInterval","clearInterval","Math","floor","random","mjolnir","charInfoId","setCharInfoId","Helmet","decoration","_baseUrl","_apiKey","charLimit","comicsLimit","request","useCallback","method","body","headers","fetch","response","ok","status","json","useFetch","result","_transformCharacter","getAllComics","_transformComics","getComic","thumbnail","urls","path","extension","items","title","prices","pageCount","textObjects","price","language"],"sourceRoot":""}